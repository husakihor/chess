#pragma once

#include <iostream>
#include <optional>
#include <vector>

#include "../parsing/pgn-parser.hh"
#include "../pieces/piece-type.hh"
#include "../pieces/position.hh"
#include "report-type.hh"

//#include "../parsing/pgn-move.hh"

namespace board
{
    /* The move symbolize a movement of a piece.
     * It contains every informations related to the action */
    class Move final
    {
    public:
        using opt_piece_t = std::optional<PieceType>;

        // +++++ Constructor ++++ //
        Move(int start, int end, PieceType piece, bool capture,
             opt_piece_t promotion = std::nullopt);

        // +++++ Convert PgnMoves to Move +++++ //
        static std::vector<Move> pgn_to_moves(std::vector<PgnMove> moves);

        // +++++ Getters +++++ //
        int start_get() const;
        int end_get() const;
        PieceType piece_get() const;
        opt_piece_t promotion_get() const;
        bool capture_get() const;

        // +++++ Debug Functions +++++ //
        Position index_to_pos(int index);
        friend std::ostream &operator<<(std::ostream &out, Move &m)
        {
            out << "Type : " << print_piece(m.piece_)
                << " Moving : " << m.index_to_pos(m.start_) << " to "
                << m.index_to_pos(m.end_) << (m.capture_ ? " Capturing..." : "")
                << (m.promotion_ != std::nullopt ? " Promoting..." : "");
            return out;
        }

        // Equal and not equal operators
        bool operator==(const Move &other) const
        {
            return start_ == other.start_get() && end_ == other.end_get()
                && piece_ == other.piece_get()
                && promotion_ == other.promotion_get()
                && capture_ == other.capture_get();
        }

        bool operator!=(const Move &other) const
        {
            return start_ != other.start_get() || end_ != other.end_get()
                || piece_ != other.piece_get()
                || promotion_ != other.promotion_get()
                || capture_ != other.capture_get();
        }

    private:
        // The original position of the piece
        int start_;

        // The destination of the piece
        int end_;

        // The type of the moving piece
        PieceType piece_;

        // if promotion, contains the piecetype generated by the promotion
        opt_piece_t promotion_;

        // if the move is a capture
        bool capture_;
    };
} // namespace board
